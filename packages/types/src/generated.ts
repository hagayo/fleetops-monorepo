/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
                500: components["responses"]["ServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List robots */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by robot status */
                    status?: components["schemas"]["RobotStatus"];
                    /** @description Filter by whether the robot can be reassigned */
                    reassignable?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RobotListResponse"];
                    };
                };
                500: components["responses"]["ServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a robot by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RobotResponse"];
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["ServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel the current robot mission and force return-to-base
         * @description - Always transitions the robot to returning_to_base. - If cancel reason is battery or hardware, robot becomes non-reassignable until recovered.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CancelRequest"];
                };
            };
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AcceptedResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                404: components["responses"]["NotFound"];
                409: components["responses"]["Conflict"];
                500: components["responses"]["ServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/missions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List missions */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by mission status */
                    status?: components["schemas"]["MissionStatus"];
                    page?: number;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MissionListResponse"];
                    };
                };
                500: components["responses"]["ServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/missions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a mission by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MissionResponse"];
                    };
                };
                404: components["responses"]["NotFound"];
                500: components["responses"]["ServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get aggregate mission stats */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StatsResponse"];
                    };
                };
                500: components["responses"]["ServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Server-sent events stream
         * @description Emits `mission.created`, `mission.updated`, `robot.updated`, and `stats.updated` events. This endpoint uses the `text/event-stream` content type and is intended for browsers or SSE clients.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Event stream */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": string;
                    };
                };
                500: components["responses"]["ServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthResponse: {
            /** @example true */
            ok: boolean;
        };
        ErrorResponse: {
            /** @example false */
            success: boolean;
            /** @example unauthorized */
            message: string;
        };
        AcceptedResponse: {
            /** @example true */
            success: boolean;
            data: {
                /** @example true */
                accepted?: boolean;
                /** Format: uuid */
                robotId?: string;
            };
        };
        /** @enum {string} */
        RobotStatus: "idle" | "assigned" | "en_route" | "delivering" | "returning_to_base" | "charging" | "maintenance";
        /** @enum {string} */
        CancelReason: "user" | "battery" | "hardware" | "blocked_path" | "system";
        /** @enum {string} */
        MissionStatus: "pending" | "assigned" | "en_route" | "delivering" | "completed" | "failed" | "canceled";
        MissionHistoryItem: {
            status: string;
            /** Format: date-time */
            at: string;
            note?: string | null;
        };
        Robot: {
            /** Format: uuid */
            id: string;
            status: components["schemas"]["RobotStatus"];
            /** Format: float */
            batteryPct: number;
            /** Format: uuid */
            currentMissionId?: string | null;
            reassignable: boolean;
            lastError?: string | null;
            /** Format: date-time */
            updatedAt: string;
        };
        Mission: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            robotId?: string | null;
            status: components["schemas"]["MissionStatus"];
            cancelReason?: components["schemas"]["CancelReason"] | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            history?: components["schemas"]["MissionHistoryItem"][];
        };
        Stats: {
            completed: number;
            failed: number;
            active: number;
        };
        PaginatedMeta: {
            page?: number;
            limit?: number;
            total?: number;
            totalPages?: number;
        };
        RobotListResponse: {
            /** @example true */
            success: boolean;
            data: components["schemas"]["Robot"][];
        };
        RobotResponse: {
            /** @example true */
            success: boolean;
            data: components["schemas"]["Robot"];
        };
        MissionListResponse: {
            /** @example true */
            success: boolean;
            data: components["schemas"]["Mission"][];
            meta: components["schemas"]["PaginatedMeta"];
        };
        MissionResponse: {
            /** @example true */
            success: boolean;
            data: components["schemas"]["Mission"];
        };
        StatsResponse: {
            /** @example true */
            success: boolean;
            data: components["schemas"]["Stats"];
        };
        CancelRequest: {
            reason?: components["schemas"]["CancelReason"];
        };
    };
    responses: {
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Not Found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Conflict */
        Conflict: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Server error */
        ServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
