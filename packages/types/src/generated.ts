/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/robots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List robots */
        get: operations["listRobots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get robot by id */
        get: operations["getRobot"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/robots/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel robot mission and force return to base
         * @description Cancels the robot mission and forces return to base. During return to base the robot may be reassigned from its current location unless the cancel reason is battery or hardware. If the cancel reason is battery or hardware the robot is not reassignable until resolved.
         *
         */
        post: operations["cancelRobot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/missions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List missions */
        get: operations["listMissions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/missions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mission by id */
        get: operations["getMission"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get counters */
        get: operations["getStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Server Sent Events stream */
        get: operations["sseEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login and get tokens */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh tokens */
        post: operations["refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Format: uuid */
        UUID: string;
        Position: {
            x?: number;
            y?: number;
        };
        /** @enum {string} */
        RobotStatus: "idle" | "assigned" | "en_route" | "delivering" | "returning_to_base" | "charging" | "maintenance" | "failed";
        /** @enum {string} */
        MissionStatus: "pending" | "assigned" | "en_route" | "delivering" | "completed" | "failed" | "canceled";
        /** @enum {string} */
        CancelReason: "user" | "battery" | "hardware" | "blocked_path" | "system";
        ErrorItem: {
            field?: string;
            message?: string;
            code?: string;
        };
        ErrorResponse: {
            /** @enum {boolean} */
            success: false;
            message?: string;
            errors?: components["schemas"]["ErrorItem"][];
        };
        Robot: {
            id: components["schemas"]["UUID"];
            status: components["schemas"]["RobotStatus"];
            batteryPct: number;
            currentMissionId?: components["schemas"]["UUID"] | null;
            reassignable: boolean;
            lastError?: {
                code?: string;
                message?: string;
            } | null;
            position?: components["schemas"]["Position"];
            /** Format: date-time */
            updatedAt?: string;
        };
        MissionHistoryItem: {
            status: components["schemas"]["MissionStatus"];
            /** Format: date-time */
            at: string;
            note?: string;
        };
        Mission: {
            id: components["schemas"]["UUID"];
            robotId?: components["schemas"]["UUID"] | null;
            status: components["schemas"]["MissionStatus"];
            cancelReason?: components["schemas"]["CancelReason"] | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            history?: components["schemas"]["MissionHistoryItem"][];
        };
        Stats: {
            completed: number;
            failed: number;
            active: number;
        };
        EventEnvelope: {
            /** @enum {string} */
            type: "robot.updated" | "mission.created" | "mission.updated" | "stats.updated";
            /** Format: date-time */
            ts: string;
            payload: components["schemas"]["Robot"] | components["schemas"]["Mission"] | components["schemas"]["Stats"];
        };
        ApiResponse: {
            success?: boolean;
            message?: string;
            data?: unknown;
            errors?: components["schemas"]["ErrorItem"][];
        };
        RobotsResponse: components["schemas"]["ApiResponse"] & {
            data?: components["schemas"]["Robot"][];
        };
        RobotResponse: components["schemas"]["ApiResponse"] & {
            data?: components["schemas"]["Robot"];
        };
        MissionsResponse: components["schemas"]["ApiResponse"] & {
            data?: components["schemas"]["Mission"][];
            meta?: {
                page?: number;
                limit?: number;
                total?: number;
                totalPages?: number;
            };
        };
        MissionResponse: components["schemas"]["ApiResponse"] & {
            data?: components["schemas"]["Mission"];
        };
        StatsResponse: components["schemas"]["ApiResponse"] & {
            data?: components["schemas"]["Stats"];
        };
        CommandAccepted: components["schemas"]["ApiResponse"] & {
            data?: {
                accepted?: boolean;
                robotId?: components["schemas"]["UUID"];
            };
        };
        LoginRequest: {
            /** Format: email */
            email: string;
            password: string;
        };
        AuthResponse: components["schemas"]["ApiResponse"] & {
            data?: {
                accessToken: string;
                refreshToken: string;
            };
        };
    };
    responses: {
        /** @description Resource not found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Internal server error */
        ServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listRobots: {
        parameters: {
            query?: {
                status?: "idle" | "assigned" | "en_route" | "delivering" | "returning_to_base" | "charging" | "maintenance" | "failed";
                reassignable?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RobotsResponse"];
                };
            };
            500: components["responses"]["ServerError"];
        };
    };
    getRobot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RobotResponse"];
                };
            };
            404: components["responses"]["NotFound"];
        };
    };
    cancelRobot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    reason?: components["schemas"]["CancelReason"];
                };
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommandAccepted"];
                };
            };
            404: components["responses"]["NotFound"];
            /** @description Conflict - robot not cancelable in current state */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listMissions: {
        parameters: {
            query?: {
                status?: "pending" | "assigned" | "en_route" | "delivering" | "completed" | "failed" | "canceled";
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissionsResponse"];
                };
            };
            500: components["responses"]["ServerError"];
        };
    };
    getMission: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: components["schemas"]["UUID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissionResponse"];
                };
            };
            404: components["responses"]["NotFound"];
        };
    };
    getStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StatsResponse"];
                };
            };
            500: components["responses"]["ServerError"];
        };
    };
    sseEvents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/event-stream": string;
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
        };
    };
    refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    refreshToken: string;
                };
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            401: components["responses"]["Unauthorized"];
        };
    };
}
